● (1) Seleziona tutti gli ospiti che sono stati identificati con la carta di identità


----- OPTION 1 -----

SELECT *
FROM `ospiti`
WHERE document_type = 'CI';


----- OPTION 2 -----

SELECT `name`, `lastname`, `document_type`
FROM `ospiti`
WHERE document_type = 'CI';



● (2) Seleziona tutti gli ospiti che sono nati dopo il 1988

----- OPTION 1A -----

SELECT *
FROM `ospiti`
WHERE YEAR(date_of_birth) > 1988;


----- OPTION 1B -----

SELECT `name`, `lastname`, `date_of_birth`
FROM `ospiti`
WHERE YEAR(date_of_birth) > 1988;


----- OPTION 2A -----

SELECT *
FROM `ospiti`
WHERE date_of_birth > '1988-%';


----- OPTION 2B -----

SELECT *
FROM `ospiti`
WHERE date_of_birth >= '1989-%';


----- OPTION 3A -----

SELECT *
FROM `ospiti`
WHERE date_of_birth > '1988-12-31';


----- OPTION 3B -----

SELECT `name`, `lastname`, `date_of_birth`
FROM `ospiti`
WHERE date_of_birth > '1988-12-31';


----- OPTION 4A -----

SELECT *
FROM `ospiti`
WHERE date_of_birth >= '1989-01-01';


----- OPTION 4B -----

SELECT `name`, `lastname`, `date_of_birth`
FROM `ospiti`
WHERE date_of_birth >= '1989-01-01';



● (3) Seleziona tutti gli ospiti che hanno più di 20 anni (al momento dell’esecuzione della query)


----- OPTION 1A -----
// 22 risultati --> NON comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE TIMESTAMPDIFF( YEAR, date_of_birth, CURDATE() ) > 20;


----- OPTION 1B -----
// 22 risultati --> NON comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE TIMESTAMPDIFF( YEAR, date_of_birth, CURRENT_DATE ) > 20;


----- OPTION 1C -----
// 22 risultati --> NON comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE TIMESTAMPDIFF( YEAR, date_of_birth, NOW() ) > 20;


----- OPTION 2A -----
// 22 risultati --> NON comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE date_of_birth < SUBDATE(CURDATE(), INTERVAL 21 YEAR);


----- OPTION 2B -----
// 22 risultati --> NON comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE date_of_birth < SUBDATE(CURRENT_DATE, INTERVAL 21 YEAR);


----- OPTION 2C -----
// 22 risultati --> NON comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE date_of_birth < SUBDATE(NOW(), INTERVAL 21 YEAR);


----- OPTION 3A -----
//24 risultati --> comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE YEAR(CURDATE()) - YEAR(date_of_birth) > 20;


----- OPTION 3B -----
//24 risultati --> comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE YEAR(CURRENT_DATE) - YEAR(date_of_birth) > 20;


----- OPTION 3C -----
//24 risultati --> comprende due nati nel 2000 ma nei mesi di Febbraio e Settembre (ancora ventenni)

SELECT *
FROM `ospiti`
WHERE YEAR(NOW()) - YEAR(date_of_birth) > 20;



● (4) Seleziona tutti gli ospiti il cui nome inizia con la D
// MySQL è case insensitive quindi si può indicare sia 'd%' sia '%D'


----- OPTION 1 -----

SELECT *
FROM `ospiti`
WHERE name LIKE 'D%';


----- OPTION 2 -----
// LOCATE lavora con l'indice: il numero 1 è l'indice al quale voglio trovare la lettera 'd' dentro alla stringa 'name' 

SELECT *
FROM `ospiti`
WHERE LOCATE('d', 'name') = 1;



● (5) Calcola il numero totale degli ordini accepted


----- OPTION 1 -----
// Calcola il NUMERO totale degli ordini accepted

SELECT COUNT(id)
FROM `pagamenti`
WHERE status = 'accepted';


----- OPTION 2 -----
// Calcola il totale INCASSATO degli ordini accepted

SELECT SUM(price) AS 'totale'
FROM `pagamenti`
WHERE status = 'accepted';



● (6) Qual è il prezzo massimo pagato?
// ATTENZIONE! Non solo il prezzo massimo ma quello massimo PAGATO (ossia 'accepted')


----- OPTION 1 -----

SELECT MAX(price) AS 'highest price'
FROM `pagamenti`
WHERE status = 'accepted';


----- OPTION 2 -----
// Ordinare i risultati in ordine discendente DESC ma mostrare solo il primo risultato usando LIMIT 1 (dove 1 è il numero massimo di risultati che voglio visualizzare)

SELECT `price`
FROM `pagamenti`
WHERE status = 'accepted'
ORDER BY price DESC
LIMIT 1;



● (7) Seleziona gli ospiti riconosciuti con patente e nati nel 1975


----- OPTION 1 -----

SELECT *
FROM `ospiti`
WHERE document_type = 'Driver License'
AND YEAR(date_of_birth) = 1975;


----- OPTION 2 -----
// BETWEEN indica un intervallo con gli estremi COMPRESI 

SELECT *
FROM `ospiti`
WHERE document_type = 'Driver License'
AND date_of_birth BETWEEN '1975-01-01' AND '1975-12-31';



● (8) Quanti paganti sono anche ospiti?
// # si usa per i commenti nel linguaggio SQL


----- OPTION 1 -----
// COUNT(*) conta le righe quindi devo imporre il WHERE

SELECT COUNT(*) AS 'numero_ospiti_paganti'
FROM `paganti`
WHERE ospite_id IS NOT NULL;


----- OPTION 2 -----
// COUNT(ospite_id) conta solo le righe nella colonna 'ospite_id' in cui ci sia effettivamente un valore inserito (NOT NULL) e quindi il WHERE è implicito

SELECT COUNT(ospite_id) AS 'numero_ospiti_paganti'
FROM `paganti`;


----- OPTION 3 -----
// DISTINCT non conta i valori doppi ma li conta una volta sola
// Anche in questo caso il WHERE è implicito ma è sempre consigliato metterlo

SELECT COUNT(DISTINCT(ospite_id)) AS 'numero_ospiti_paganti'
FROM `paganti`
#WHERE ospite_id IS NOT NULL;



● (9) Quanti posti letto ha l’hotel in totale?

SELECT SUM(beds) AS 'totale posti_letto'
FROM `stanze`;

